/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.exportSymbol('proto.goods.NewGoods', null, global);
goog.exportSymbol('proto.goods.NewGoodsResult', null, global);
goog.exportSymbol('proto.goods.Recommend', null, global);
goog.exportSymbol('proto.goods.RecommendResult', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.goods.NewGoodsResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.goods.NewGoodsResult.repeatedFields_, null);
};
goog.inherits(proto.goods.NewGoodsResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.goods.NewGoodsResult.displayName = 'proto.goods.NewGoodsResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.goods.NewGoodsResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.goods.NewGoodsResult.prototype.toObject = function(opt_includeInstance) {
  return proto.goods.NewGoodsResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.goods.NewGoodsResult} msg The msg instance to transform.
 * @return {!Object}
 */
proto.goods.NewGoodsResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    goodsesList: jspb.Message.toObjectList(msg.getGoodsesList(),
    proto.goods.NewGoods.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.goods.NewGoodsResult}
 */
proto.goods.NewGoodsResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.goods.NewGoodsResult;
  return proto.goods.NewGoodsResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.goods.NewGoodsResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.goods.NewGoodsResult}
 */
proto.goods.NewGoodsResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.goods.NewGoods;
      reader.readMessage(value,proto.goods.NewGoods.deserializeBinaryFromReader);
      msg.addGoodses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.goods.NewGoodsResult} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.goods.NewGoodsResult.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.goods.NewGoodsResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.goods.NewGoodsResult.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGoodsesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.goods.NewGoods.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NewGoods goodses = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.goods.NewGoods>}
 */
proto.goods.NewGoodsResult.prototype.getGoodsesList = function() {
  return /** @type{!Array.<!proto.goods.NewGoods>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.goods.NewGoods, 1));
};


/** @param {!Array.<!proto.goods.NewGoods>} value */
proto.goods.NewGoodsResult.prototype.setGoodsesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.goods.NewGoods=} opt_value
 * @param {number=} opt_index
 * @return {!proto.goods.NewGoods}
 */
proto.goods.NewGoodsResult.prototype.addGoodses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.goods.NewGoods, opt_index);
};


proto.goods.NewGoodsResult.prototype.clearGoodsesList = function() {
  this.setGoodsesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.goods.NewGoods = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.goods.NewGoods, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.goods.NewGoods.displayName = 'proto.goods.NewGoods';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.goods.NewGoods.prototype.toObject = function(opt_includeInstance) {
  return proto.goods.NewGoods.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.goods.NewGoods} msg The msg instance to transform.
 * @return {!Object}
 */
proto.goods.NewGoods.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    catid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    extendcatid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    goodssn: jspb.Message.getFieldWithDefault(msg, 4, ""),
    goodsname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    clickcount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    brandid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    storecount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    commentcount: jspb.Message.getFieldWithDefault(msg, 9, 0),
    weight: jspb.Message.getFieldWithDefault(msg, 10, 0),
    marketprice: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    shopprice: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    costprice: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    priceladder: jspb.Message.getFieldWithDefault(msg, 14, ""),
    keywords: jspb.Message.getFieldWithDefault(msg, 15, ""),
    goodsremark: jspb.Message.getFieldWithDefault(msg, 16, ""),
    goodscontent: jspb.Message.getFieldWithDefault(msg, 17, ""),
    originalimg: jspb.Message.getFieldWithDefault(msg, 18, ""),
    isreal: jspb.Message.getFieldWithDefault(msg, 19, false),
    isonsale: jspb.Message.getFieldWithDefault(msg, 20, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.goods.NewGoods}
 */
proto.goods.NewGoods.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.goods.NewGoods;
  return proto.goods.NewGoods.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.goods.NewGoods} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.goods.NewGoods}
 */
proto.goods.NewGoods.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCatid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExtendcatid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoodssn(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoodsname(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClickcount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBrandid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStorecount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCommentcount(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeight(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMarketprice(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setShopprice(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCostprice(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriceladder(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeywords(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoodsremark(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoodscontent(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginalimg(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsreal(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsonsale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.goods.NewGoods} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.goods.NewGoods.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.goods.NewGoods.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.goods.NewGoods.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getCatid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getExtendcatid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getGoodssn();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getGoodsname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getClickcount();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getBrandid();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = this.getStorecount();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = this.getCommentcount();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = this.getWeight();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = this.getMarketprice();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = this.getShopprice();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = this.getCostprice();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = this.getPriceladder();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = this.getKeywords();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = this.getGoodsremark();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = this.getGoodscontent();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = this.getOriginalimg();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = this.getIsreal();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = this.getIsonsale();
  if (f) {
    writer.writeBool(
      20,
      f
    );
  }
};


/**
 * optional uint32 iD = 1;
 * @return {number}
 */
proto.goods.NewGoods.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.goods.NewGoods.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 catID = 2;
 * @return {number}
 */
proto.goods.NewGoods.prototype.getCatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.goods.NewGoods.prototype.setCatid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 extendCatID = 3;
 * @return {number}
 */
proto.goods.NewGoods.prototype.getExtendcatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.goods.NewGoods.prototype.setExtendcatid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string goodsSN = 4;
 * @return {string}
 */
proto.goods.NewGoods.prototype.getGoodssn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.goods.NewGoods.prototype.setGoodssn = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string goodsName = 5;
 * @return {string}
 */
proto.goods.NewGoods.prototype.getGoodsname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.goods.NewGoods.prototype.setGoodsname = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 clickCount = 6;
 * @return {number}
 */
proto.goods.NewGoods.prototype.getClickcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.goods.NewGoods.prototype.setClickcount = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 brandID = 7;
 * @return {number}
 */
proto.goods.NewGoods.prototype.getBrandid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.goods.NewGoods.prototype.setBrandid = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 storeCount = 8;
 * @return {number}
 */
proto.goods.NewGoods.prototype.getStorecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.goods.NewGoods.prototype.setStorecount = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint32 commentCount = 9;
 * @return {number}
 */
proto.goods.NewGoods.prototype.getCommentcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.goods.NewGoods.prototype.setCommentcount = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional uint32 weight = 10;
 * @return {number}
 */
proto.goods.NewGoods.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.goods.NewGoods.prototype.setWeight = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional float marketPrice = 11;
 * @return {number}
 */
proto.goods.NewGoods.prototype.getMarketprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.goods.NewGoods.prototype.setMarketprice = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional float shopPrice = 12;
 * @return {number}
 */
proto.goods.NewGoods.prototype.getShopprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.goods.NewGoods.prototype.setShopprice = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional float costPrice = 13;
 * @return {number}
 */
proto.goods.NewGoods.prototype.getCostprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.goods.NewGoods.prototype.setCostprice = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string priceLadder = 14;
 * @return {string}
 */
proto.goods.NewGoods.prototype.getPriceladder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.goods.NewGoods.prototype.setPriceladder = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string keywords = 15;
 * @return {string}
 */
proto.goods.NewGoods.prototype.getKeywords = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.goods.NewGoods.prototype.setKeywords = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string goodsRemark = 16;
 * @return {string}
 */
proto.goods.NewGoods.prototype.getGoodsremark = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.goods.NewGoods.prototype.setGoodsremark = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional string goodsContent = 17;
 * @return {string}
 */
proto.goods.NewGoods.prototype.getGoodscontent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.goods.NewGoods.prototype.setGoodscontent = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional string originalImg = 18;
 * @return {string}
 */
proto.goods.NewGoods.prototype.getOriginalimg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.goods.NewGoods.prototype.setOriginalimg = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional bool isReal = 19;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.goods.NewGoods.prototype.getIsreal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 19, false));
};


/** @param {boolean} value */
proto.goods.NewGoods.prototype.setIsreal = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional bool isOnSale = 20;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.goods.NewGoods.prototype.getIsonsale = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 20, false));
};


/** @param {boolean} value */
proto.goods.NewGoods.prototype.setIsonsale = function(value) {
  jspb.Message.setField(this, 20, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.goods.RecommendResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.goods.RecommendResult.repeatedFields_, null);
};
goog.inherits(proto.goods.RecommendResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.goods.RecommendResult.displayName = 'proto.goods.RecommendResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.goods.RecommendResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.goods.RecommendResult.prototype.toObject = function(opt_includeInstance) {
  return proto.goods.RecommendResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.goods.RecommendResult} msg The msg instance to transform.
 * @return {!Object}
 */
proto.goods.RecommendResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    recommendList: jspb.Message.toObjectList(msg.getRecommendList(),
    proto.goods.Recommend.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.goods.RecommendResult}
 */
proto.goods.RecommendResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.goods.RecommendResult;
  return proto.goods.RecommendResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.goods.RecommendResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.goods.RecommendResult}
 */
proto.goods.RecommendResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.goods.Recommend;
      reader.readMessage(value,proto.goods.Recommend.deserializeBinaryFromReader);
      msg.addRecommend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.goods.RecommendResult} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.goods.RecommendResult.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.goods.RecommendResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.goods.RecommendResult.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRecommendList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.goods.Recommend.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Recommend recommend = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.goods.Recommend>}
 */
proto.goods.RecommendResult.prototype.getRecommendList = function() {
  return /** @type{!Array.<!proto.goods.Recommend>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.goods.Recommend, 1));
};


/** @param {!Array.<!proto.goods.Recommend>} value */
proto.goods.RecommendResult.prototype.setRecommendList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.goods.Recommend=} opt_value
 * @param {number=} opt_index
 * @return {!proto.goods.Recommend}
 */
proto.goods.RecommendResult.prototype.addRecommend = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.goods.Recommend, opt_index);
};


proto.goods.RecommendResult.prototype.clearRecommendList = function() {
  this.setRecommendList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.goods.Recommend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.goods.Recommend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.goods.Recommend.displayName = 'proto.goods.Recommend';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.goods.Recommend.prototype.toObject = function(opt_includeInstance) {
  return proto.goods.Recommend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.goods.Recommend} msg The msg instance to transform.
 * @return {!Object}
 */
proto.goods.Recommend.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    catid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    goodsname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    shopprice: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.goods.Recommend}
 */
proto.goods.Recommend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.goods.Recommend;
  return proto.goods.Recommend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.goods.Recommend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.goods.Recommend}
 */
proto.goods.Recommend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCatid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoodsname(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setShopprice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.goods.Recommend} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.goods.Recommend.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.goods.Recommend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.goods.Recommend.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getCatid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getGoodsname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getShopprice();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional uint32 iD = 1;
 * @return {number}
 */
proto.goods.Recommend.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.goods.Recommend.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 catID = 2;
 * @return {number}
 */
proto.goods.Recommend.prototype.getCatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.goods.Recommend.prototype.setCatid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string goodsName = 3;
 * @return {string}
 */
proto.goods.Recommend.prototype.getGoodsname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.goods.Recommend.prototype.setGoodsname = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float shopPrice = 4;
 * @return {number}
 */
proto.goods.Recommend.prototype.getShopprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.goods.Recommend.prototype.setShopprice = function(value) {
  jspb.Message.setField(this, 4, value);
};


